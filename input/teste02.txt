// Comments must to be ignored

/*
This grammar implements a^nb^nc^n of two ways
First, as usually in PEG and next with attributes
*/

S :
  &(A!'b') 'a'* B !.
  /
  C<n> D<m> {? n == m} E<o> {?m == o}
  ;
A :
  'a' A 'b' / ;
B :
  'b' B 'c' / ;
  
C returns[int n]:
  'a' C<m> {n = m+1}
  /
   {n = 0};
   
D returns[int n]:
  'b' D<m> {n = m+1}
  /
   {n = 0};
   
E returns[int n]:
  'c' E<m> {n = m+1}
  /
   {n = 0};
