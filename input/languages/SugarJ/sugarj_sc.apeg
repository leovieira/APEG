
//===========================================================================
//
//  This grammar implements the SugarJ language
//  The original source can be found in http://www.romanredz.se/freesoft.htm 
//
//===========================================================================

apeg SugarJ;


functions AdaptableFunctions;

//===========================================================================
//
//  Sugar Declaration
//
//=========================================================================== 
 
sugar_declaration returns[String name, String rules]:
  ws modifiers SUGAR Identifier<name> LWING defining_syntax<rules> RWING
  ;
 
modifiers: 
  'public' ws
  ;
  
//===========================================================================
//
//  PEG Rules
//
//=========================================================================== 

defining_syntax returns[String s]:
  CONTEXT_FREE_SYNTAX peg_rule<s>
  ; 

peg_rule returns[String s] locals[String s1, String id]:
  {s='';} (peg_expr<s1> ARROW Identifier<id> SEMI {s = concat(s, concat(id, concat(': ', concat(s1, ';'))));})*
  ;
  
peg_expr returns[String s] locals[String s1]:
  peg_seq<s> (CHOICE peg_seq<s1> {s = concat(s, concat(' / ', s1));})*
  ;
  
peg_seq returns[String s] locals[String s1]:
  peg_predicate<s> (peg_predicate<s1> {s = concat(s, concat(' ', s1));})* / {s ='';}
  ;

peg_predicate returns[String s]:
    '!' peg_unary_op<s> {s = concat('!', s);}
  / '&' peg_unary_op<s> {s = concat('&', s);}
  / peg_unary_op<s>
  ;

peg_unary_op returns[String s]:
    peg_factor<s> REPEAT {s = concat(s, '*');}
  / peg_factor<s> ONE_OR_MORE {s = concat(s, '+');}
  / peg_factor<s> OPTIONAL {s = concat(s, '?');}
  / peg_factor<s> ws
  ;
  
peg_factor returns[String s]:
    s=(String_Literal
  / Id
  / '[' RANGE+ ']'
  / '.')
  / '(' peg_expr<s> ')' {s = concat('(', concat(s, ')'));}
  ;

//=========================================================================
//  Lexical Structure
//=========================================================================

//-------------------------------------------------------------------------
//  Identifiers
//-------------------------------------------------------------------------

Identifier returns[String s]:
   s=Id ws;     // This defines an identifier following by space

Id:
   !Keyword (Letter / '_') Letter_Or_Digit*;

Letter_Or_Digit:
   Letter
 / Digit
 / '_';

Letter:
  [a-zA-Z]
  ;
  
Digit:
  [0-9]
  ;

RANGE:
    Char '-' Char 
  / !']' Char
  ;

//-------------------------------------------------------------------------
//  Keywords
//-------------------------------------------------------------------------

Keyword:
   ( 'sugar'
   / 'context-free syntax'
   ) !Letter_Or_Digit;

CONTEXT_FREE_SYNTAX:
   'context-free syntax' ws;

SUGAR:
   'sugar' !Letter_Or_Digit ws;

//-------------------------------------------------------------------------
//  Literals
//-------------------------------------------------------------------------
  
String_Literal:
  '\'' (!'\'' Char)+ '\''
  ;

Char:
    '\\' ('n' / 'r' / 't' / 'b' / 'f' / '"' / '\'' / '\\' )
  /  !'\\' .
  ;
  
//-------------------------------------------------------------------------
//  Separators, Operators
//------------------------------------------------------------------------- 

ANY:
   '.' ws;

ARROW:
   '->' ws;

CHOICE:
   '/' ws;

LWING:
   '{' ws;

REPEAT:
   '*' ws;

ONE_OR_MORE:
   '+' ws;

OPTIONAL:
   '?' ws;

RWING:
   '}' ws;

SEMI:
   ';' ws;

  
//-------------------------------------------------------------------------
//  White space and comments
//-------------------------------------------------------------------------

ws:
  (space / comment)*;

space:
  ' ' / '\t' / '\u000C' / endOfLine;

endOfLine:
  '\r\n' / '\r' / '\n'; 

comment:
    '//' (!endOfLine .)* endOfLine
  / '/*' (!'*/' .)* '*/';