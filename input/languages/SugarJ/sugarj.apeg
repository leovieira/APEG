apeg SugarJ;

/**
 This grammar implements the SugarJ languages
 
 Conceitualmente, uma definião de "sugar" tem duas partes: definição da sintaxe e regras de transformação ou desugaring
 Eu irei introduzir somente a parte de sintaxe, pois é o que interessa para a gente.
**/

/**
 This nonterminal defines the syntax of a Sugar 
 
 Notes: The modifier must be public;
**/

functions AdaptableFunctions;

sugar_declaration returns[String name, String rules]:
  ws modifiers ws 'sugar' ws name=Id ws '{'  ws defining_syntax<rules> ws '}'
  ;
 
modifiers: 
  'public'
  ;
  
/**
 This nonterminal defines the syntax of the rules. We use the PEG style
**/

defining_syntax returns[String s]:
  'context-free syntax' ws peg_rule<s>
  ; 

peg_rule returns[String s] locals[String s1, String id]:
  {s='';} (ws peg_expr<s1> ws '->' ws id=Id ws ';' {s = concat(s, concat(id, concat(': ', concat(s1, ';'))));})*
  ;
  
peg_expr returns[String s] locals[String s1]:
  peg_seq<s> (ws '/' ws peg_seq<s1> {s = concat(s, concat(' / ', s1));})*
  ;
  
peg_seq returns[String s] locals[String s1]:
  peg_predicate<s> (ws peg_predicate<s1> {s = concat(s, concat(' ', s1));})* / {s ='';}
  ;

peg_predicate returns[String s]:
    '!' peg_unary_op<s> {s = concat('!', s);}
  / '&' peg_unary_op<s> {s = concat('&', s);}
  / peg_unary_op<s>
  ;

peg_unary_op returns[String s]:
    peg_factor<s> '*' {s = concat(s, '*');}
  / peg_factor<s> '+' {s = concat(s, '+');}
  / peg_factor<s> '?' {s = concat(s, '?');}
  / peg_factor<s>
  ;
  
peg_factor returns[String s]:
    s=(String_Literal
  / Id
  / '[' RANGE+ ']'
  / '.')
  / '(' peg_expr<s> ')' {s = concat('(', concat(s, ')'));}
  ;
  
String_Literal:
  '\'' (!'\'' Char)+ '\''
  ;

Char:
    '\\' ('n' / 'r' / 't' / 'b' / 'f' / '"' / '\'' / '\\' )
  /  !'\\' .
  ;
  
Id:
  Letter (Letter / Digit / '_')*
  ;
  
Letter:
  [a-zA-Z]
  ;
  
Digit:
  [0-9]
  ;

RANGE:
    Char '-' Char 
  / !']' Char
  ;
  
/**
 This nonterminal defines white space
**/

ws:
  (space / comment)*;

space:
  ' ' / '\t' / endOfLine;

endOfLine:
  '\r\n' / '\r' / '\n'; 

comment:
    '//' (!endOfLine .)* endOfLine
  / '/*' (!'*/' .)* '*/';