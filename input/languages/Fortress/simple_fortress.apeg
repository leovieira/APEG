apeg Fortress;

functions AdaptableFunctions;

trait_type:
   id;

type:
   id;

//-------------------------------------------------------------------------
// Extensibility - Syntax.rats
//-------------------------------------------------------------------------

grammar_def[Map map] returns[String name, String r] locals[String n, String r1, List l, List l1]:
   'native' w 'grammar' w name=id &(collect_nonterminal_decl<l>) {r = '';}
     (br nonterminal_decl<n> {r = concat(r, concat(n, ' : {?false};\n'));})* w 'end'
 / 'grammar' w name=id (w grammar_extends<map>)? &(collect_nonterminal_def<l>) {l1 = availableNonterminals(map, l);}
     {r = '';} (br nonterminal_def<l1,r1> {r = concat(r, concat(r1, '\n'));})* w 'end';

grammar_extends[Map map]:
   'extends' w qualified_names<map>;

qualified_names[Map map] locals[String n, boolean b]:
   n=qualified_name {? true == checkGrammarName(map, n)}
 / '{' n=qualified_name {? true == checkGrammarName(map, n) }
      (w ',' w n=qualified_name {? true == checkGrammarName(map, n) })* '}';

nonterminal_def[List l] returns[String r] locals[String n, String r1]:
   n=id w '|' w ':=' w syntax_extension_def<l, r1> {r = concat(n,concat(' : ', r1));}
         (w syntax_extension_def_or<l,r1> {r = concat(r, concat(' / ', r1));})* {r = concat(r, ';');}
 / nonterminal_header<n> w ':' (w trait_type)? w ':=' w syntax_def<l,r1> {r = concat(n, concat(' : ', r1));}
         (w syntax_def_or<l,r1> {r = concat(r, concat(' / ', r1));})* {r = concat(r, ';');}
 / nonterminal_decl<n> {r = concat(n, ' : {?false};');};

nonterminal_decl returns[Strng name]:
   nonterminal_header<name> w ':' w trait_type;

nonterminal_header returns[String name]:
   ('private' w)? name=id (w syntax_params)? (':' type)?;

syntax_params:
   '(' w syntax_param (w ',' w syntax_param)* w ')';

syntax_param:
   id ':' trait_type;

syntax_def[List l] returns[String r]:
   (choice_modifier w)? syntax_symbols<l,r> w '=>' w pre_transformer_decl;

syntax_extension_def[List l] returns[String r]:
    syntax_def<l,r>
  / (super_choice_modifier w)? id w 'from' w id;

syntax_def_or[List l] returns[String r]:
   '|' w syntax_def<l,r>;

syntax_extension_def_or[List l] returns[String r]:
   '|' w syntax_extension_def<l,r>;

choice_modifier:
   'private';

super_choice_modifier:
   'private'
 / 'without';

pre_transformer_decl:
   pre_transformer;

pre_transformer:
   'case' w id w 'of' w case_transformer_clauses w 'end'
 / (id w )? '<[' w (']' !'>' / !']' .)* w ']>';   // Na implementação de Fortress o trecho entre '<[' e ']>' é guardado sem checagem com o parser

case_transformer_clauses:
   case_transformer_clause (br case_transformer_clause)*;

case_transformer_clause:
   id (w '(' w bind_id_list w ')')? w '=>' w pre_transformer;

syntax_symbols[List l] returns[String s] locals[String s1]:
   syntax_symbol<l,s> (symbs<l,s1> {s = concatW(s, s1);})* &(w '=>');

syntax_symbols_x[List l] returns[String s] locals[String s1]:
   syntax_symbol<l,s> (symbs<l,s1> {s = concatW(s, s1);})*;

symbs[List l] returns[String s]:
   space_or_breakline+ syntax_symbol<l,s>;

space_or_breakline:
   (' ' / '\f')+
 / ('\r\n' / '\r' / '\n');

syntax_symbol[List l] returns[String s] locals[String s1]:
   'NOT' w symbol_mod<l,s1> {s = concat('!', s1);}
 / 'AND' w symbol_mod<l,s1> {s = concat('&', s1);}
 / symbol_mod<l,s>;

symbol_mod[List l] returns[String s] locals[String s1]:
   single<l,s1> '?' {s = concat(s1, '?');}
 / single<l,s1> '*' {s = concat(s1, '*');}
 / single<l,s1> '+' {s = concat(s1, '+');}
 / single<l,s>;

single[List l] returns[String s]:
   group_symbol<l,s>
 / base_symbol<l,s>;

base_symbol[List l] returns[String s]:
   (id ':')? symbol<l,s>;

group_symbol[List l] returns[String s] locals[String s1]:
   '{' w syntax_symbols_x<l,s1> w '}' {s = concat('(', concat(s1, ')'));};

symbol[List l] returns[String s]:
   item<l,s> '#'?;

item[List l] returns[String s] locals[String ch]:
   '_' {s = '.';}
 / '[' {s = '[';} (character_class<ch> {s = concat(s,ch);})* ']' {s = concat(s, ']');}
 / 'TAB' {s = '\t';}
 / 'FORMFEED' {s = '\f';}
 / 'RETURN' {s = '\r';}
 / 'NEWLINE' {s = 'br';}
 / 'SPACE' {s = 'wr';}
 / 'BACKSPACE' {s = '\u2408';}
 /  !(w '=>') item_text<l,s>;

character_class returns[String ch] locals[String ch1]:
   char<ch> (':' char<ch1> {ch = concat(ch, concat('-', ch1));})?;

char returns[String ch]:
   'TAB' {ch = '\t';}
 / 'FORMFEED' {ch = '\f';}
 / 'RETURN' {ch = '\r';}
 / 'NEWLINE' {ch = '\n';}
 / 'SPACE' {ch = ' ';}
 / 'BACKSPACE' {ch = '\u2408';}
 / utf16<ch>;

// Look if is a nonterminal name or a terminal. A terminal name is all text that if not an available nonterminal name
item_text[List l] returns[String s] locals[String ch]:
   !special_symbols {s= '';} (utf16<ch> {s = concat(s, ch);})+ {s = formatTerminal(l,s);};

utf16 returns[String ch]:
   '`' special_chars {ch='';}           // look this
 / '`' special_symbols {ch='';}         // look this
 / !special_chars ch=.;

special_chars:
   ' '
 / '\f'
 / '\r\n'
 / '\r'
 / '\n'
 / ':'
 / '?'
 / '#'
 / '+'
 / '*'
 / '['
 / ']'
 / '`'
 / '|'
 / '_'
 / '{'
 / '}';

special_symbols:
   'TAB'
 / 'FORMFEED'
 / 'RETURN'
 / 'NEWLINE'
 / 'SPACE'
 / 'BACKSPACE'
 / 'AND'
 / 'NOT'
 / '=>';


// ----------------------------
//  Rules for Catching all Nonterminais Definition
// -----------------------------

collect_nonterminal_decl returns[List l] locals[String n]:
   (br nonterminal_decl<n> {l = addList(l, n);})*;

collect_nonterminal_def returns[List l] locals[List l1]:
  {l1 = newList();} (br nonterminal_name_def<l1, l> {l1 = l;})*;

nonterminal_name_def[List l] returns[List l1] locals[String n, String r]:
   n=id w '|' w ':=' w syntax_extension_def<l,r> (w syntax_extension_def_or<l,r>)* {l1 = l;}
 / nonterminal_header<n> w ':' (w trait_type)? w ':=' w syntax_def<l,r>
         (w syntax_def_or<l,r>)* {l1 = addList(l, n);}
 / nonterminal_decl<n> {l1 = addList(l, n);};


//-------------------------------------------------------------------------
//  Identifiers - Identifier.rats
//-------------------------------------------------------------------------

Id: id; // this is for compatibility with the Fortress names used in the api grammars

id_or_op_name:
   id
 / op_name;

id:
   !(keywords / op_name) (id_start id_rest+ / unicode_id_start) ;  // It can not be '_'

id_start:
   unicode_id_start / '_';

id_rest:
   '_' / '\'' / unicode_id_rest;

bind_id:
   id / '_'; 

bind_id_list:
   bind_id (w ',' w bind_id)*;

bind_id_or_bind_tuple:
   bind_id
 / '(' w bind_id w ',' w bind_id_list w ')';

simple_name:
   id;

api_name:
   qualified_name;

qualified_name:
   id &(w '...')                // it ignores the dots
 / id ('.' id)* &(w '...')       // it ignores the dots
 / id ('.' id)*;

//----------------------------------------------------------------
// An operator name has at least two different uppercase letters
// also it does not begin and end with an underscore
//----------------------------------------------------------------
op_name:
   !('SUM' / 'PROD' / 'BY') head_op_name
 / keyword_operator;

head_op_name locals[String ch1, String ch2]:
   ch1=[A-Z] (
        '_'* ch2=[A-Z] !({?ch1 == ch2}) tail_op_name
      / '_'* &[A-Z] head_op_name
     );     

tail_op_name:
   !([A-Za-z0-9] / '_')       // there is no more symbols
 / ('_'* [A-Z])+ !([A-Za-z0-9] / '_');                                                         


//-------------------------------------------------------------------------
//  Unicode.rats
//-------------------------------------------------------------------------

unicode_id_start:  // In the original rats file definition, this nonterminal allow the set of unicode characters
   [a-zA-Z];

unicode_id_rest:
   [a-zA-Z0-9];

//-------------------------------------------------------------------------
//  Keywords - Keyword.rats
//-------------------------------------------------------------------------

keywords:
   key !id_rest;

key:
   'absorbs'
 / 'abstract'
 / 'also'
 / 'api'
 / 'asif'
 / 'as'
 / 'atomic'
 / 'at'
 / 'bool'
 / 'case'
 / 'catch'
 / 'coerce'
 / 'coerces'
 / 'component'
 / 'comprises'
 / 'default'
 / 'dim'
 / 'do'
 / 'elif'
 / 'else'
 / 'end'
 / 'ensures'
 / 'except'
 / 'excludes'
 / 'exit'
 / 'export'
 / 'extends'
 / 'finally'
 / 'fn'
 / 'forbid'
 / 'for'
 / 'from'
 / 'getter'
 / 'hidden'
 / 'if'
 / 'import'
 / 'int'
 / 'invariant'
 / 'io'
 / 'juxtaposition'
 / 'label'
 / 'most'
 / 'native'
 / 'nat'
 / 'object'
 / 'of'
 / 'opr'
 / 'or'
 / 'override'
 / 'private'
 / 'property'
 / 'provided'
 / 'requires'
 / 'self'
 / 'settable'
 / 'setter'
 / 'spawn'
 / 'syntax'
 / 'test'
 / 'then'
 / 'throws'
 / 'throw'
 / 'trait'
 / 'transient'
 / 'tryatomic'
 / 'try'
 / 'typecase'
 / 'type'
 / 'unit'
 / 'value'
 / 'var'
 / 'where'
 / 'while'
 / 'widens'
 / 'with'
 / 'wrapped'
 / 'goto'
 / 'idiom'
 / 'public'
 / 'pure'
 / 'reciprocal'
 / 'static';

keyword_operator:
   key_op !id_rest;

key_op:
   'juxtaposition'
 / 'in'
 / 'per'
 / 'square'
 / 'cubic'
 / 'inverse'
 / 'squared'
 / 'cubed'
 / 'BIG'
 / 'FORALL'
 / 'SI_init';
 
 // There are more other keywords

//-------------------------------------------------------------------------
//  Spaces and Comments - Spacing.rats
//-------------------------------------------------------------------------

end_of_file:
   !.;

white_space:
   space / new_line;

space:
   ' '
 / '\f'
 / no_new_line_comment;

new_line:
   '\r\n'
 / '\r'
 / '\n'
 / comment;

no_new_line_comment:
   '(*' no_new_line_comment_content* '*)';

no_new_line_comment_content:
   no_new_line_comment
 / '*' !')'
 / !'*' !new_line .;

comment:                        // it comment may have new lines.
   '(*' comment_content* '*)';

comment_content:
   comment 
 / '*' !')'
 / !'*' .; 

w:
   white_space*;
  
wr:
   white_space+;

s:
   space*;
   
sr:
   space+;

nl:
   s new_line w;

br:
   nl / s ';' w;

rect_separator:
   (w ';')+ w
 / sr
 / nl;