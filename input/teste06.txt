apeg adapdatadependent;

functions AdaptableFunctions;

literal3[Grammar g] : literal<g> literal<g> literal<g> !. ;

literal[Grammar g] locals[int n, Grammar g1]:
<<<<<<< HEAD
	number<g, n> 
	{g1 = copyGrammar(g);
	//g1 = copy(g).addRule("strN[Grammar g] <- " + rep("CHAR", n)); }
=======
	number<g, n> { g1 = addRule(copyGrammar(g), concat(concat('strN : ', concatN('CHAR<g> ', n)), ';')) ;  }
	'['
>>>>>>> c2efe4b461cba9d7e6a8b7e70910149c1537758b
	strN<g1>
	']'
    ;

strN[Grammar g]:
    {? false }
	;

CHAR[Grammar g] : . ;

number[Grammar g] returns[int r] locals[int aux] :
  digit<g,r> ( digit<g,aux> { r = r * 10 + aux; } )*
  ;
  
digit[Grammar g] returns [int x1] :
  '0'  { x1 = 0; }
  / '1'  { x1 = 1; }
  / '2'  { x1 = 2; }
  / '3'  { x1 = 3; }
  / '4'  { x1 = 4; }
  / '5'  { x1 = 5; }
  / '6'  { x1 = 6; }
  / '7'  { x1 = 7; }
  / '8'  { x1 = 8; }
  / '9'  { x1 = 9; }
  ;