package swul;

import org.sugarj.languages.Java;

/*
 * https://svn.strategoxt.org/repos/StrategoXT/java-swul/trunk/syn/
 */
public sugar SwulSyntax {

%%%%%%%%%%%%%%%%%%%%%% module java-swul %%%%%%%%%%%%%%%%%%%%%%%%%%%
  sorts JavaExpr SwulComponent JavaBlock
  context-free syntax
    SwulComponent -> JavaExpr { cons("ToExpr")}

    JavaExpr      -> SwulComponent { cons("FromExpr")} 

    JavaBlock     -> SwulComponent { cons("FromBlock")} 
     
  context-free priorities
      JavaExpr -> SwulComponent 
    > SwulComponent -> JavaExpr

  context-free priorities
      SwulComponent -> JavaExpr
    > JavaExpr -> SwulComponent   

%%%%%%%%%%%%%%%%%%%%%% module widgets %%%%%%%%%%%%%%%%%%%%%%%%%%%

%%  Widgets that take the form of components
sorts ComponentType ComponentPropType Component
  context-free syntax
    "button"       -> ComponentType {cons("JButton")}
    "label"        -> ComponentType {cons("JLabel")}
    "textarea"     -> ComponentType {cons("JTextArea")}
    "textfield"    -> ComponentType {cons("JTextField")}
    "checkbox"     -> ComponentType {cons("JCheckBox")}
    "radiobutton"  -> ComponentType {cons("JRadioButton")}
    "combobox"     -> ComponentType {cons("JComboBox")}
    "tree"         -> ComponentType {cons("JTree")}
    "progressbar"  -> ComponentType {cons("JProgressBar")}
    "slider"       -> ComponentType {cons("JSlider")}
    "togglebutton" -> ComponentType {cons("JToggleButton")}
    "separator"    -> ComponentType {cons("JSeparator")}

    "document" -> ComponentPropType {cons("Document")}
    "rows"     -> ComponentPropType {cons("Rows")}
    "columns"  -> ComponentPropType {cons("Columns")}
    
    "plain"   -> Component {cons("PlainDocument")}
    "html"    -> Component {cons("HtmlDocument")}
    "styled"  -> Component {cons("StyledDocument")}
    
  context-free syntax
    "model"            -> ComponentPropType {cons("Model")}
    "rootvisible"      -> ComponentPropType {cons("RootVisible")}
    "toggleclickcount" -> ComponentPropType {cons("ToggleClickCount")}    
    "cellrenderer"     -> ComponentPropType {cons("CellRenderer")}
    "tooltipmanager"   -> ComponentPropType {cons("ToolTipManagerComponent")}

  context-free syntax
    "minimum" -> ComponentPropType {cons("Minimum")}
    "maximum" -> ComponentPropType {cons("Maximum")}
    "value"   -> ComponentPropType {cons("Value")}
      
  context-free syntax
    "text"                 -> ComponentPropType {cons("Text")}
    "tip"                  -> ComponentPropType {cons("Tip")}
    "enabled"              -> ComponentPropType {cons("Enabled")}
    "selected"             -> ComponentPropType {cons("Selected")}
    "border"               -> ComponentPropType {cons("Border")}
    "doublebuffered"       -> ComponentPropType {cons("DoubleBuffered")}
    "opaque"               -> ComponentPropType {cons("Opaque")}
    "minimumsize"          -> ComponentPropType {cons("Minimumsize")}
    "debuggraphicsoptions" -> ComponentPropType {cons("DebugGraphicsOptions")}
    "group"                -> ComponentPropType {cons("Group")}
    "label for"	           -> ComponentPropType {cons("LabelFor")}


  context-free syntax
    "editable"            -> ComponentPropType {cons("Editable")}
    "horizontalalignment" -> ComponentPropType {cons("HorizontalAlignment")}
    "verticalalignment"   -> ComponentPropType {cons("VerticalAlignment")}

%%
%% Misc values that can be set to properties
%%

%% Alignments types 
  context-free syntax
    "left"     -> Component {cons("Left")}
    "center"   -> Component {cons("Center")}
    "right"    -> Component {cons("Right")}
    "leading"  -> Component {cons("Leading")}
    "trailing" -> Component {cons("Trailing")}
    "top"      -> Component {cons("Top")}
    "bottom"   -> Component {cons("Bottom")}

%% Border types 
  context-free syntax
    "empty" "border"          -> ComponentType {cons("EmptyBorder")}
    "line" "border" Component -> ComponentType {cons("LineBorder")}
    Level "etched" "border"   -> ComponentType {cons("EtchedBorder")}     
    Level "bevel" "border"    -> ComponentType {cons("BevelBorder")}

  context-free syntax
    "raised"                 -> Level {cons("Raised")}
    "lowered"                -> Level {cons("Lowered")}

%% Colors (or should it be Colours)
  context-free syntax
    "red"       -> Component {cons("Red")}
    "white"     -> Component {cons("White")}
    "blue"      -> Component {cons("Blue")}
    "orange"    -> Component {cons("Orange")}
    "black"     -> Component {cons("Black")}
    "grey"      -> Component {cons("Grey")}
    "borggreen" -> Component {cons("BorgGreen")}
  

%%%%%%%%%%%%%%%%%%%%%% module events %%%%%%%%%%%%%%%%%%%%%%%%%%%

%%
 %% Creating events listeners
  %%
  sorts ComponentType ComponentPropType  
  context-free syntax
  "window" "event"         -> ComponentPropType {cons("Window")}
  "action" "event"         -> ComponentPropType {cons("Action")}
  "caret" "event"          -> ComponentPropType {cons("Caret")}
  "change" "event"         -> ComponentPropType {cons("Change")}
  "undo" "event"           -> ComponentPropType {cons("UndoableEdit")}
  "document" "event"       -> ComponentPropType {cons("Document")}
  "item" "event"           -> ComponentPropType {cons("Item")}
  "list" "event"           -> ComponentPropType {cons("ListSelection")}
  "menu" "event"           -> ComponentPropType {cons("Menu")}

%%%%%%%%%%%%%%%%%%%%%% module menubar %%%%%%%%%%%%%%%%%%%%%%%%%%%

%%
 %% How to build a menubar of the things javax.swing.JComponent
  %% 
  sorts ComponentType ComponentPropType ComponentProp
  context-free syntax            
    "menu"             -> ComponentType {cons("JMenu")}   
    "menu item"        -> ComponentType {prefer, cons("JMenuItem")}   
    "menu radiobutton" -> ComponentType {prefer, cons("JRadioButtonMenuItem")}   
    "menu checkbox"    -> ComponentType {prefer, cons("JCheckBoxMenuItem")}
    "menu separator"   -> ComponentType {prefer, cons("JSeparator")}
    
    "items"            -> ComponentPropType {cons("Items")}  

    "accelerator" "=" (Modifier "-")* KeyEvent -> ComponentProp {cons("Accelerator")}
    "mnemonic"    "="  KeyEvent                -> ComponentProp {cons("Mnemonic")}
 
%%    
 %% Keys and their modifiers
  %%
  sorts Modifier 
  context-free syntax    

    "ctrl"  -> Modifier {cons("CtrlModifier")}
    "alt"   -> Modifier {cons("AltModifier")}
    "shift" -> Modifier {cons("ShiftModifier")}
    "meta"  -> Modifier {cons("MetaModifier")}

  sorts KeyEvent
  lexical syntax
    [a-zA-Z0-9] -> KeyEvent

%%%%%%%%%%%%%%%%%%%%%% module swul %%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%
 %%  The general structure of the Swul language
 %%
 sorts Component 
  context-free syntax  
    ComponentType Named? ComponentProps?                        -> Component {cons("Component")}
   
  sorts Named
  context-free syntax   
    "named" Id -> Named {cons("SwulNamed")}

  sorts ComponentProps    
  context-free syntax   
    "{" ComponentProp* "}" -> ComponentProps {cons("ComponentProps")}
    "of" Component         -> ComponentProps {cons("DefaultPropsWithComponent")}


  sorts ComponentProp ComponentPropValues
  context-free syntax
    ComponentPropType "=" ComponentPropValues                   -> ComponentProp {cons("ComponentProp")}
    "{" Component* "}"                                          -> ComponentPropValues {cons("ComponentPropMultiValue")}
    "(" Component "," Component "," Component "," Component ")" -> ComponentPropValues {cons("FourTuple")}
    "(" Component "," Component ")"                             -> ComponentPropValues {cons("TwoTuple")}   
    Component                                                   -> ComponentPropValues {cons("ComponentPropSingleValue")}

%%
 %%  Keywords that symbolize a component derived of a javax.swing.JComponent
  %%
  sorts ComponentType
  context-free syntax  
    "panel"                             -> ComponentType {cons("JPanel")}
    "toolbar"                           -> ComponentType {cons("JToolBar")}    
    "splitpane"                         -> ComponentType {cons("JSplitPane")}
    "scrollpane"                        -> ComponentType {cons("JScrollPane")}  
    "tabbedpane"                        -> ComponentType {cons("JTabbedPane")}
    "tab"                               -> ComponentType {cons("Tab")}
              
    
%%
 %%  Keywords that symbolize a component implementing java.awt.LayoutManager2
  %%    
    "border" "layout"                   -> ComponentType {cons("BorderLayout")}
    "gridbag" "layout"                  -> ComponentType {cons("GridBagLayout")}
    "box" "layout"                      -> ComponentType {cons("BoxLayout")}
    "card" "layout"                     -> ComponentType {cons("CardLayout")}
%%
 %%  Keywords that symbolize a component implementing java.awt.LayoutManager
  %%    
    "grid" "layout"                     -> ComponentType {cons("GridLayout")}
%%
 %%  Keywords that symbolize a component implementing java.awt.Window
  %%
    "frame"                             -> ComponentType {cons("JFrame")}      
%%
 %%  Misc ComponentType
  %%    
    "this"                              -> ComponentType {cons("SwulThis")}    
    "nothing "                          -> ComponentType {cons("Nothing")}
    "hide "                             -> ComponentType {cons("Hide")}
    "dispose"                           -> ComponentType {cons("Dispose")}
    "exit"                              -> ComponentType {cons("Close")}
    "___"                               -> ComponentType {cons("NoGridbagComponent")}
    "<<<"                               -> ComponentType {cons("LeftGridbagComponent")}
    "^^^"                               -> ComponentType {cons("UpperGridbagComponent")}
%%
 %%  All the types of keywords that symbolize a component property
  %%
  sorts ComponentPropType
  context-free syntax
    "tip"                -> ComponentPropType {cons("ToolTip")}
    "content"            -> ComponentPropType {cons("Content")}
    "tabs"               -> ComponentPropType {cons("Tabs")}
    "closeoperation"     -> ComponentPropType {cons("CloseOperation")}
    "menubar"            -> ComponentPropType {cons("MenuBar")}
    "title"              -> ComponentPropType {cons("Title")}
    "icon"               -> ComponentPropType {cons("Icon")}
    "split"              -> ComponentPropType {cons("Split")}
    "resizeweight"       -> ComponentPropType {cons("ResizeWeight")}
    "top"                -> ComponentPropType {cons("TopComponent")}
    "left"               -> ComponentPropType {cons("LeftComponent")}
    "bottom"             -> ComponentPropType {cons("BottomComponent")}
    "right"              -> ComponentPropType {cons("RightComponent")}
    "layout"             -> ComponentPropType {cons("Layout")}
    "floatable"          -> ComponentPropType {cons("Floatable")}
    "view"               -> ComponentPropType {cons("ScrollPaneContent")}
    "row"                -> ComponentPropType {cons("Row")}
    "horizontal" "gap"   -> ComponentPropType {cons("HorizontalGap")}
    "vertical" "gap"     -> ComponentPropType {cons("VerticalGap")}
    "orientation"        -> ComponentPropType {cons("Orientation")}
    "anchor"             -> ComponentPropType {cons("Anchor")}
    "fill"               -> ComponentPropType {cons("Fill")}
    "external" "padding" -> ComponentPropType {cons("Insets")}
    "inner" "padding"    -> ComponentPropType {cons("Padding")}
    "north"              -> ComponentPropType {cons("North")}
    "south"              -> ComponentPropType {cons("South")}
    "east"               -> ComponentPropType {cons("East")}
    "west"               -> ComponentPropType {cons("West")}
    "center"             -> ComponentPropType {cons("Center")}

    "horizontal"         -> Component {cons("Horizontal")}
    "vertical"           -> Component {cons("Vertical")}

%%
%% Lexial syntax
%%
  sorts Id
  lexical syntax
    [a-zA-Z][a-zA-Z0-9]* -> Id

  lexical syntax
    [\t\ \r\n] -> LAYOUT {prefer}

  context-free restrictions 
    LAYOUT? -/- [\t\r\n\ ] 
}
