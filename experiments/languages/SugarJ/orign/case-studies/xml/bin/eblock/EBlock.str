module eblock/EBlock

 imports org/sugarj/java/init/InitTrans org/sugarj/languages/Java eblock/ConcatIds


signature
  constructors
    PreEBlock     : iter-star() * JavaExpr() -> JavaExpr()
    PostEBlock    : JavaExpr() * iter-star() -> JavaExpr()
    InnerBlock    : iter-star() -> JavaBlockStm()
    PrePostEBlock : iter-star() * JavaExpr() * iter-star() -> JavaExpr()


signature
  constructors
    PreEBlock     : List(JavaBlockStm) * JavaExpr -> JavaExpr
    PostEBlock    : JavaExpr * List(JavaBlockStm) -> JavaExpr
    InnerBlock    : List(JavaBlockStm) -> JavaBlockStm
    PrePostEBlock : List(JavaBlockStm) * JavaExpr * List(JavaBlockStm) -> JavaExpr


strategies
  desugar =
    changed-tree(java-lift-eblocks)


strategies
  java-lift-eblocks =
    bottomup(try(java-desugar-prepostblock <+ java-lift-to-block-level))

  java-desugar-prepostblock :
    PrePostEBlock(pre, expr, post) -> PreEBlock(pre, PostEBlock(expr, post))

  java-lift-to-block-level =
    java-lift-from-blocks <+ java-lift-from-constructor-blocks <+ java-lift-from-switchgroup-blocks

  java-lift-from-blocks :
    Block(bstm1*) -> Block(bstm2*)
    with bstm2* := <try(mapconcat(java-local-lift-eblocks))> bstm1*

  java-lift-from-constructor-blocks :
    ConstrBody(x, bstm1*) -> ConstrBody(x, bstm2*)
    with bstm2* := <try(mapconcat(java-local-lift-eblocks))> bstm1*

  java-lift-from-switchgroup-blocks :
    SwitchGroup(x, bstm1*) -> SwitchGroup(x, bstm2*)
    with bstm2* := <try(mapconcat(java-local-lift-eblocks))> bstm1*

  java-local-lift-eblocks =
    java-collect-split-om-pre-eblock
    ; ?(<id>, pre-stms)
    ; java-collect-split-om-post-eblock
    ; ?(t, post-stms)
    ; if !post-stms => [] ; !pre-stms => [] then
        ![t]
      else
        <concat> [ <mapconcat(java-local-lift-eblocks)> pre-stms
                 , <java-local-lift-eblocks> t
                 , <mapconcat(java-local-lift-eblocks)> post-stms
                 ]
      end

  java-collect-split-om-pre-eblock =
    rules ( JavaPreEBlocks := [] )
    ; alltd(java-lift-pre-eblock)
    ; !(<id>, <JavaPreEBlocks>)

  java-lift-pre-eblock :
    PreEBlock(bstm*, e) -> e
    with rules (
           JavaPreEBlocks := <conc> (bstm*, <JavaPreEBlocks>)
         )

  java-collect-split-om-post-eblock =
    rules ( JavaPostEBlocks := [] )
    ; alltd(java-lift-post-eblock)
    ; !(<id>, <JavaPostEBlocks>)

  java-lift-post-eblock :
    PostEBlock(e, bstm*) -> e
    with rules (
           JavaPostEBlocks := <conc> (bstm*, <JavaPostEBlocks>)
         )