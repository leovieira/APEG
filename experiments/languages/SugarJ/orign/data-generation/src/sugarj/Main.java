package sugarj;

import java.io.File;
import java.io.IOException;




public class Main {

	private static final int NUM_EXEC=1;
	
	/**
	 * @param cmd
	 */
	public static void main(String[] cmd) throws Throwable {
		final String path = "/home/leo/workspace/APEG/experiments/languages/SugarJ/orign/case-studies";
		String project[] = {"closures"};
		String source[] = {"src"};
		String bin[] = {"bin"};
		String files[][] = {{"javaclosure/Test.sugj", "javaclosure/Closure.sugj"}};
		
		for(int i=0; i < project.length; ++i) {
			createDir("./data/" + project[i]);
			for(int j = 1; j <= NUM_EXEC; ++j) {
				//clear(path + "/" + project[i] + "/" + bin[i]);
				run(path, project[i], files[i], source[i], bin[i], project[i] + "_" + j);
				clear(path + "/" + project[i] + "/" + bin[i]);
			}
		}
		System.exit(0);
	}

	private static void run(String path, String project, String[] files,
			                String source, String bin, String outputName) throws Throwable {
		// Generating the input arguments
		String args[] = new String[7+files.length];
		args[0] = "-l"; args[1] = "java";
		args[2] = "--sourcepath";
		//
		args[3] = path + "/" + project + "/" + source;
		args[4] = "-d";
		args[5] = path + "/" + project + "/" + bin;
		args[6] = "--gen-files";
		for(int j = 0; j < files.length; ++j) {
			args[7+j] = files[j];
		}
		apeg.data.DataManager.init(outputName, "data/" + project);
		org.sugarj.driver.cli.Main.main(args);
		apeg.data.DataManager.flush();
	}
	
	public static void createDir(String path) {
		File file = new File(path);
		if(!file.exists()) {
			file.mkdir();
		}
	}
	
	public static void clear(String binPath) throws IOException, InterruptedException {
		//clean the tmp files generated by sugarj
		String tmpDir = System.getProperty("java.io.tmpdir") + File.separator;
		//System.out.println(tmpDir);

		//clean the bin
		int resp = Runtime.getRuntime().exec(new String[]{"rm", "-rf", binPath}).waitFor();
		
		//clean all temp files
		String cmd = "/home/leo/workspace/APEG/experiments/languages/SugarJ/orign/data-generation/clean.sh";
		resp = Runtime.getRuntime().exec(cmd).waitFor();
		
	}
	
}
